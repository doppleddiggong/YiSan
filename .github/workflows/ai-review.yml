# 워크플로우 이름 설정
name: AI Code Review

# 워크플로우 트리거 조건 설정
on:
  # pull_request 이벤트가 발생했을 때 워크플로우 실행
  # types: [opened, synchronize]는 PR이 열리거나(opened) 새로운 커밋으로 동기화될 때(synchronize) 트리거됩니다.
  pull_request:
    paths:
      - 'Source/**' # Source 디렉토리 내 모든 파일 변경 시 트리거

# 작업(Jobs) 정의
jobs:
  review:
    # 이 작업은 최신 Ubuntu 환경에서 실행됩니다.
    runs-on: ubuntu-latest

    # 작업 단계(Steps) 정의
    steps:
      # 1. 저장소 체크아웃
      # PR의 최신 코드를 워크플로우 러너로 가져옵니다.
      - uses: actions/checkout@v4

      # 2. 변경사항(Diff) 추출
      # 현재 PR의 변경사항을 diff 형식으로 추출하여 changes.patch 파일로 저장합니다.
      # git fetch origin ${{ github.base_ref }} : 베이스 브랜치의 최신 상태를 가져옵니다.
      # git diff origin/${{ github.base_ref }}...HEAD : 베이스 브랜치와 현재 PR 헤드 간의 차이를 계산합니다.
      - name: Extract Diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > changes.patch

      # 3. GPT를 호출하여 코드 리뷰 수행
      # OpenAI API를 사용하여 changes.patch 파일의 내용을 기반으로 코드 리뷰를 요청합니다.
      - name: Call GPT for Review
        id: ai_review # 이 스텝의 출력을 참조하기 위한 ID
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # GitHub Secrets에 저장된 OpenAI API 키 사용
        run: |
          # curl 명령어를 사용하여 OpenAI Chat Completions API 호출
          REVIEW=$(curl https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4o\", # 사용할 OpenAI 모델 지정
              \"messages\": [
                {\"role\": \"system\", \"content\": \"You are a strict and pragmatic senior C++/C# code reviewer. Focus on performance, memory safety, const correctness, Unreal Engine coding conventions, and any possible bugs. Be concise and direct.\"}, # AI의 역할 및 지시사항 설정
                {\"role\": \"user\", \"content\": \"Review this code diff and suggest improvements:\\n$(cat changes.patch)\"}
              ]
            }" | jq -r '.choices[0].message.content') # jq를 사용하여 JSON 응답에서 리뷰 내용 추출

          echo "$REVIEW" > review.txt # 추출된 리뷰 내용을 review.txt 파일로 저장
          echo "review_body=$REVIEW" >> $GITHUB_OUTPUT # 리뷰 내용을 워크플로우 출력으로 설정

      # 4. PR에 리뷰 코멘트 게시
      # AI가 생성한 리뷰 내용을 Pull Request에 코멘트로 게시합니다.
      # marocchino/sticky-pull-request-comment@v2 액션은 기존 코멘트를 업데이트하여 중복을 방지합니다.
      - name: Post Comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🤖 AI Code Review" # 코멘트 헤더
          message: ${{ steps.ai_review.outputs.review_body }} # 이전 스텝에서 생성된 리뷰 내용을 코멘트 메시지로 사용

      # 5. Discord로 리뷰 결과 전송
      # AI 코드 리뷰 결과를 Discord 웹훅을 통해 특정 채널로 전송합니다.
      - name: Send Review to Discord
        if: always()  # 이전 스텝의 성공/실패 여부와 관계없이 항상 실행
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }} # GitHub Secrets에 저장된 Discord 웹훅 URL 사용
        run: |
          # Markdown 및 따옴표를 이스케이프하여 JSON 유효성 확보
          ESCAPED_REVIEW=$(echo "${{ steps.ai_review.outputs.review_body }}" | jq -Rs .) # jq를 사용하여 리뷰 본문을 JSON 문자열로 이스케이프

          # curl 명령어를 사용하여 Discord 웹훅으로 임베드 메시지 전송
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"username\": \"AI Reviewer 🤖\", # Discord에 표시될 봇 이름
              \"embeds\": [{
                \"title\": \"AI Code Review on PR #${{ github.event.pull_request.number }}\", # 임베드 제목 (PR 번호 포함)
                \"url\": \"${{ github.event.pull_request.html_url }}\", # PR 링크
                \"description\": ${ESCAPED_REVIEW}, # AI 리뷰 내용 (이스케이프된 JSON 문자열)
                \"color\": 5814783, # 임베드 색상 (십진수)
                \"fields\": [
                  {
                    \"name\": \"🔀 Branch\",
                    \"value\": \"${{ github.head_ref }} → ${{ github.base_ref }}\", # 브랜치 정보
                    \"inline\": true
                  },
                  {
                    \"name\": \"🧠 Author\",
                    \"value\": \"${{ github.event.pull_request.user.login }}\", # PR 작성자
                    \"inline\": true
                  }
                ],
                \"footer\": {
                  \"text\": \"Generated by GPT-4 via GitHub Actions\"
                },
                \"timestamp\": \"$(date --iso-8601=seconds)\" # 현재 시간 (ISO 8601 형식)
              }]
            }" \
            $DISCORD_WEBHOOK # Discord 웹훅 URL
    
