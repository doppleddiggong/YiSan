name: AI Code Review

on:
  push:
    paths:
      - 'Source/**'
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
    paths:
      - 'Source/**'
  workflow_dispatch:
    inputs:
      base:
        description: 'Í∏∞Ï§Ä Ïª§Î∞ã (Ïòà: abc1234)'
        required: false
      head:
        description: 'ÎπÑÍµê Ïª§Î∞ã (Ïòà: def5678)'
        required: false

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Diff
        id: diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "üîç PR Í∏∞Î∞ò diff ÏÉùÏÑ± Ï§ë..."
            git fetch origin ${{ github.base_ref }}
            git diff origin/${{ github.base_ref }}...HEAD > changes.patch

          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "üîç Push Í∏∞Î∞ò diff ÏÉùÏÑ± Ï§ë..."
            if [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
              git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 ${{ github.sha }} > changes.patch
            else
              git diff ${{ github.event.before }}..${{ github.sha }} > changes.patch
            fi

          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "‚öôÔ∏è ÏàòÎèô Ïã§Ìñâ: base/head Ïª§Î∞ã ÎπÑÍµê"
            BASE="${{ github.event.inputs.base }}"
            HEAD="${{ github.event.inputs.head }}"
            if [[ -n "$BASE" && -n "$HEAD" ]]; then
              git diff "$BASE" "$HEAD" > changes.patch
            else
              echo "‚ùó base/head ÎØ∏ÏûÖÎ†• ‚Üí HEAD~1 ÎπÑÍµê"
              git diff HEAD~1 HEAD > changes.patch
            fi
          fi

          echo "--- Î≥ÄÍ≤ΩÎêú ÏΩîÎìú ---"
          cat changes.patch || echo "‚ö†Ô∏è Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå"

      - name: GPT ÏΩîÎìú Î¶¨Î∑∞ Ìò∏Ï∂ú
        id: ai_review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Î≥ÄÍ≤ΩÎêú ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ GPT Ìò∏Ï∂ú ÏÉùÎûµ
          if [ ! -s changes.patch ]; then
            echo "Î≥ÄÍ≤Ω ÏÇ¨Ìï≠Ïù¥ ÏóÜÏñ¥ GPT Ìò∏Ï∂úÏùÑ ÏÉùÎûµÌï©ÎãàÎã§."
            echo "review_body=Î≥ÄÍ≤ΩÎêú ÏΩîÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # C++/C# ÌååÏùºÎßå Ï∂îÏ∂ú
          grep -E '\.(cpp|h|cs)' changes.patch > filtered.patch || true
          if [ ! -s filtered.patch ]; then
            echo "ÏÜåÏä§ÏΩîÎìú Î≥ÄÍ≤ΩÏù¥ ÏóÜÏñ¥ GPT Ìò∏Ï∂úÏùÑ ÏÉùÎûµÌï©ÎãàÎã§."
            echo "review_body=Î¶¨Î∑∞Ìï† C++/C# ÏΩîÎìú Î≥ÄÍ≤ΩÏù¥ ÏóÜÏäµÎãàÎã§." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # ÎùºÏù∏ Ïàò Ï†úÌïú (300Ï§Ñ Ïù¥Ìïò)
          head -n 300 filtered.patch > trimmed.patch
          
          # GPT Ìò∏Ï∂ú
          DIFF_CONTENT=$(jq -Rs . < trimmed.patch)
          
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"ÎãπÏã†ÏùÄ Ïã†Ï§ëÌïòÍ≥† ÏÑ±Îä• Ï§ëÏã¨Ï†ÅÏù∏ C++/C# ÏΩîÎìú Î¶¨Î∑∞Ïñ¥ÏûÖÎãàÎã§. Unreal Engine Ïä§ÌÉÄÏùºÏùÑ Îî∞Î•¥ÏÑ∏Ïöî.\"},
                {\"role\": \"user\", \"content\": \"Îã§Ïùå ÏΩîÎìú diffÎ•º Î¶¨Î∑∞ÌïòÍ≥† Í∞úÏÑ†Ï†êÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî:\\n\" + $DIFF_CONTENT }
              ]
            }")
          
          REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')
          
          # GPT ÏùëÎãµÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞ ÎåÄÏ≤¥ Î©îÏãúÏßÄ
          if [ -z "$REVIEW" ]; then
            REVIEW="‚ö†Ô∏è GPT ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§. Î¶¨Î∑∞Î•º ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§."
          fi
          
          echo "$REVIEW" > review.txt
          
          # ‚úÖ ÏïàÏ†ÑÌïòÍ≤å Ï∂úÎ†• Ï†ÄÏû• (Î©ÄÌã∞ÎùºÏù∏ ÎåÄÏùë)
          {
            echo "review_body<<EOF"
            echo "$REVIEW"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "ü§ñ AI Code Review"
          message: ${{ steps.ai_review.outputs.review_body }}

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          ESCAPED_REVIEW=$(echo "${{ steps.ai_review.outputs.review_body }}" | jq -Rs .)

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_INFO="${{ github.head_ref }} ‚Üí ${{ github.base_ref }}"
            AUTHOR="${{ github.event.pull_request.user.login }}"
            TITLE="AI Code Review on PR #${{ github.event.pull_request.number }}"
            URL="${{ github.event.pull_request.html_url }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            BRANCH_INFO="${{ github.ref_name }}"
            AUTHOR="${{ github.event.pusher.name }}"
            TITLE="AI Code Review on push to ${GITHUB_REF_NAME}"
            URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          else
            BRANCH_INFO="manual"
            AUTHOR="${{ github.actor }}"
            TITLE="AI Code Review (Manual Trigger)"
            URL="${{ github.server_url }}/${{ github.repository }}"
          fi

          TIMESTAMP=$(date --iso-8601=seconds)

          JSON=$(jq -n \
            --arg username "AI Reviewer ü§ñ" \
            --arg title "$TITLE" \
            --arg url "$URL" \
            --arg description "$ESCAPED_REVIEW" \
            --arg branch "$BRANCH_INFO" \
            --arg author "$AUTHOR" \
            --arg timestamp "$TIMESTAMP" \
            '{
              username: $username,
              embeds: [{
                title: $title,
                url: $url,
                description: $description,
                color: 5814783,
                fields: [
                  { name: "üîÄ Branch", value: $branch, inline: true },
                  { name: "üß† Author", value: $author, inline: true }
                ],
                footer: { text: "Generated by GPT-4 via GitHub Actions" },
                timestamp: $timestamp
              }]
            }'
          )

          echo "‚úÖ Discord Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë..."
          curl -H "Content-Type: application/json" -X POST -d "$JSON" "$DISCORD_WEBHOOK"
