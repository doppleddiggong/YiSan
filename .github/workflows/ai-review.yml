name: AI Code Review

on:
  push:
    paths:
      - 'Source/**'

  pull_request:
    types: [opened, synchronize]
    branches:
      - main
    paths:
      - 'Source/**'

  workflow_dispatch:
    inputs:
      base:
        description: '기준 커밋 (예: abc1234)'
        required: false
      head:
        description: '비교 대상 커밋 (예: def5678)'
        required: false

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Diff
        id: diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🔍 PR 기반 diff 생성 중..."
            git fetch origin ${{ github.base_ref }}
            git diff origin/${{ github.base_ref }}...HEAD > changes.patch

          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "🔍 Push 기반 diff 생성 중..."
            if [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
              echo "🆕 새 브랜치 → 전체 파일 diff"
              git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 ${{ github.sha }} > changes.patch
            else
              git diff ${{ github.event.before }}..${{ github.sha }} > changes.patch
            fi

          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "⚙️ 수동 실행: 입력 커밋 범위 비교"
            BASE=${{ github.event.inputs.base }}
            HEAD=${{ github.event.inputs.head }}

            if [[ -n "$BASE" && -n "$HEAD" ]]; then
              git diff "$BASE" "$HEAD" > changes.patch
            else
              echo "⚠️ base/head 미입력: 기본 HEAD~1..HEAD 비교"
              git diff HEAD~1 HEAD > changes.patch
            fi
          fi

          echo "--- 변경된 코드 ---"
          cat changes.patch || echo "⚠️ 변경사항 없음"

      - name: Call GPT for Review
        id: ai_review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ ! -s changes.patch ]; then
            echo "⚠️ 변경된 코드가 없습니다. 리뷰 생략."
            echo "review_body=⚠️ 변경된 코드가 없습니다. 리뷰 생략됨." >> $GITHUB_OUTPUT
            exit 0
          fi
      
          REVIEW=$(curl https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
              \"model\": \"gpt-4o\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"You are a strict and pragmatic senior C++/C# code reviewer. Focus on performance, memory safety, const correctness, Unreal Engine coding conventions, and any possible bugs. Be concise and direct.\"},
                {\"role\": \"user\", \"content\": \"Review this code diff and suggest improvements:\\n$(cat changes.patch)\"}
              ]
            }" | jq -r '.choices[0].message.content // "⚠️ GPT 응답이 없습니다."')
      
          echo "$REVIEW" > review.txt
          echo "review_body=$REVIEW" >> $GITHUB_OUTPUT

      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🤖 AI Code Review"
          message: ${{ steps.ai_review.outputs.review_body }}

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          ESCAPED_REVIEW=$(echo "${{ steps.ai_review.outputs.review_body }}" | jq -Rs .)

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_INFO="${{ github.head_ref }} → ${{ github.base_ref }}"
            AUTHOR="${{ github.event.pull_request.user.login }}"
            TITLE="AI Code Review on PR #${{ github.event.pull_request.number }}"
            URL="${{ github.event.pull_request.html_url }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            BRANCH_INFO="${{ github.ref_name }}"
            AUTHOR="${{ github.event.pusher.name }}"
            TITLE="AI Code Review on push to ${GITHUB_REF_NAME}"
            URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          else
            BRANCH_INFO="manual"
            AUTHOR="${{ github.actor }}"
            TITLE="AI Code Review (Manual Trigger)"
            URL="${{ github.server_url }}/${{ github.repository }}"
          fi

          TIMESTAMP=$(date --iso-8601=seconds)

          JSON=$(jq -n \
            --arg username "AI Reviewer 🤖" \
            --arg title "$TITLE" \
            --arg url "$URL" \
            --arg description "$ESCAPED_REVIEW" \
            --arg branch "$BRANCH_INFO" \
            --arg author "$AUTHOR" \
            --arg timestamp "$TIMESTAMP" \
            '{
              username: $username,
              embeds: [{
                title: $title,
                url: $url,
                description: $description,
                color: 5814783,
                fields: [
                  { name: "🔀 Branch", value: $branch, inline: true },
                  { name: "🧠 Author", value: $author, inline: true }
                ],
                footer: { text: "Generated by GPT-4 via GitHub Actions" },
                timestamp: $timestamp
              }]
            }'
          )

          echo "✅ Discord 메시지 전송 중..."
          curl -H "Content-Type: application/json" -X POST -d "$JSON" "$DISCORD_WEBHOOK"
